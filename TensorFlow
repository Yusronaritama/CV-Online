{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO/krJyJz/7P5pusjBvO2f6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Yusronaritama/CV-Online/blob/main/TensorFlow\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fdiLpmjnv26Y"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eapy4p0uv6VY",
        "outputId": "46c19f0d-e664-4198-9255-32a0516c9816"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Tentukan folder utama\n",
        "folder_path = '/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/'\n",
        "\n",
        "# Menelusuri kedua subfolder dan mengambil semua file gambar\n",
        "for subfolder in ['Leclerc', 'Leopard']:\n",
        "    subfolder_path = os.path.join(folder_path, subfolder)\n",
        "\n",
        "    for root, dirs, files in os.walk(subfolder_path):\n",
        "        for file in files:\n",
        "            # Membaca file gambar, misalnya menggunakan OpenCV atau PIL\n",
        "            image_path = os.path.join(root, file)\n",
        "            print(image_path)  # Ini akan menampilkan path lengkap dari setiap gambar\n"
      ],
      "metadata": {
        "id": "dz5Y1wxEw309",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e939bde2-419a-4b06-adc5-7c91085c3ffa"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Leclerc-openphotonet_PICT6015.jpeg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/XLR-scaled-1.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/images.jpeg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Tank-Leclerc-MBT.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Nexter-CKP-Leclerc.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Leclerc.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/1.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Leclerc11-e1624635356294.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/3nmhkux.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/800px-ArtImage_Leclerc.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/Leopard_2A7A1_MBT_Main_Battle_Tank_Germany_KNDS_Rheinmetall_1920_002-f8232ce7.jpeg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/Leopard_2A7A1_MBT_Main_Battle_Tank_Germany_KNDS_Rheinmetall_1920_001.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/KNDS-Deutschland-unveils-Leopard-2A7A1-tank-with-Trophy-protection-system.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/Ex4CXFRWEAM8fC-.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/tank-tempur-paling-mengerikan.jpeg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/KNDS-orders-Trophy-APS-for-German-and-Norwegian-Leopard-2A8-tanks.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/snimok_ekrana_2021-11-02_v_21-42-53-635c9a28b7550fde17059cc779c9b192.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/6096_03360.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/unnamed.jpg\n",
            "/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/newsCover_2025_5_16_1747362820163-it33.jpeg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras import layers, models\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)\n",
        "\n",
        "train = datagen.flow_from_directory(\n",
        "    \"/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10\",\n",
        "    target_size=(150, 150),\n",
        "    class_mode='binary',\n",
        "    batch_size=16,\n",
        "    subset='training'\n",
        ")\n",
        "\n",
        "val = datagen.flow_from_directory(\n",
        "    \"/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10\",\n",
        "    target_size=(150, 150),\n",
        "    class_mode='binary',\n",
        "    batch_size=16,\n",
        "    subset='validation'\n",
        ")\n",
        "\n",
        "# Model CNN sederhana\n",
        "model = models.Sequential([\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n",
        "    layers.MaxPooling2D(2, 2),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D(2, 2),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Training\n",
        "history = model.fit(train, epochs=10, validation_data=val)\n",
        "\n",
        "# Plot akurasi\n",
        "plt.plot(history.history['accuracy'], label='Train Acc')\n",
        "plt.plot(history.history['val_accuracy'], label='Val Acc')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "zyTuWFs7zHoQ",
        "outputId": "dbe4d347-f09b-4e34-d615-bcefdf434040",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 901
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 16 images belonging to 1 classes.\n",
            "Found 4 images belonging to 1 classes.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 5s/step - accuracy: 0.3125 - loss: 0.6966 - val_accuracy: 1.0000 - val_loss: 1.2897e-08\n",
            "Epoch 2/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 813ms/step - accuracy: 1.0000 - loss: 3.2234e-07 - val_accuracy: 1.0000 - val_loss: 2.6416e-14\n",
            "Epoch 3/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 797ms/step - accuracy: 1.0000 - loss: 1.3149e-11 - val_accuracy: 1.0000 - val_loss: 3.4540e-19\n",
            "Epoch 4/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 842ms/step - accuracy: 1.0000 - loss: 2.4071e-15 - val_accuracy: 1.0000 - val_loss: 1.5056e-23\n",
            "Epoch 5/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 790ms/step - accuracy: 1.0000 - loss: 1.1132e-18 - val_accuracy: 1.0000 - val_loss: 1.6547e-27\n",
            "Epoch 6/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 799ms/step - accuracy: 1.0000 - loss: 1.0512e-21 - val_accuracy: 1.0000 - val_loss: 3.8818e-31\n",
            "Epoch 7/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 788ms/step - accuracy: 1.0000 - loss: 1.8140e-24 - val_accuracy: 1.0000 - val_loss: 1.7702e-34\n",
            "Epoch 8/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step - accuracy: 1.0000 - loss: 5.2988e-27 - val_accuracy: 1.0000 - val_loss: 1.4489e-37\n",
            "Epoch 9/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 799ms/step - accuracy: 1.0000 - loss: 2.4771e-29 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\n",
            "Epoch 10/10\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 772ms/step - accuracy: 1.0000 - loss: 1.7703e-31 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/keras_model.h5')\n"
      ],
      "metadata": {
        "id": "h9J6Nw192hX8",
        "outputId": "c73c3b04-9d12-49d9-eb68-1a069879f58d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "zip_path = '/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/converted_keras.zip'\n",
        "extract_path = '/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10'\n",
        "\n",
        "with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "    zip_ref.extractall(extract_path)\n",
        "\n",
        "print(\"ZIP berhasil diekstrak ke /content/\")\n"
      ],
      "metadata": {
        "id": "z2IxqgyO2udj",
        "outputId": "15883a20-4bb9-428e-8a61-7ba811f87f05",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ZIP berhasil diekstrak ke /content/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "# Load model\n",
        "model = keras.models.load_model('/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/keras_model.h5')\n",
        "\n",
        "# Path folder gambar uji\n",
        "img_dir_leclerc = '/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc'  # Folder untuk model Leclerc\n",
        "img_dir_leopard = '/content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard'  # Folder untuk model Leopard\n",
        "\n",
        "# Fungsi untuk prediksi gambar dalam folder\n",
        "def predict_tank_images(img_dir):\n",
        "    for fname in os.listdir(img_dir):\n",
        "        if fname.lower().endswith(('.jpg', '.png')):\n",
        "            img_path = os.path.join(img_dir, fname)\n",
        "            print(f\"🔍 Memproses: {img_path}\")\n",
        "\n",
        "            try:\n",
        "                img = image.load_img(img_path, target_size=(150, 150))\n",
        "                img_array = image.img_to_array(img) / 255.0  # Normalisasi gambar\n",
        "                img_array = np.expand_dims(img_array, axis=0)  # Mengubah dimensi array untuk prediksi\n",
        "\n",
        "                # Prediksi model\n",
        "                pred = model.predict(img_array)[0][0]\n",
        "\n",
        "                # Menentukan kategori berdasarkan threshold\n",
        "                if pred >= 0.5:\n",
        "                    print(f\"✅ {fname} → Leopard\")\n",
        "                else:\n",
        "                    print(f\"✅ {fname} → Leclerc\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error saat proses {img_path}: {e}\")\n",
        "\n",
        "# Prediksi gambar di folder Leclerc dan Leopard\n",
        "print(\"🔎 Prediksi Gambar di Folder Leclerc:\")\n",
        "predict_tank_images(img_dir_leclerc)\n",
        "\n",
        "print(\"\\n🔎 Prediksi Gambar di Folder Leopard:\")\n",
        "predict_tank_images(img_dir_leopard)\n"
      ],
      "metadata": {
        "id": "6b-M4Tan3O5x",
        "outputId": "ed422797-8238-478d-8572-0fa8ebd2310d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔎 Prediksi Gambar di Folder Leclerc:\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/XLR-scaled-1.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 108ms/step\n",
            "✅ XLR-scaled-1.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Tank-Leclerc-MBT.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
            "✅ Tank-Leclerc-MBT.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Nexter-CKP-Leclerc.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 52ms/step\n",
            "✅ Nexter-CKP-Leclerc.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Leclerc.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step\n",
            "✅ Leclerc.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/1.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n",
            "✅ 1.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/Leclerc11-e1624635356294.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
            "✅ Leclerc11-e1624635356294.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/3nmhkux.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
            "✅ 3nmhkux.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leclerc/800px-ArtImage_Leclerc.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step\n",
            "✅ 800px-ArtImage_Leclerc.jpg → Leclerc\n",
            "\n",
            "🔎 Prediksi Gambar di Folder Leopard:\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/Leopard_2A7A1_MBT_Main_Battle_Tank_Germany_KNDS_Rheinmetall_1920_001.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step\n",
            "✅ Leopard_2A7A1_MBT_Main_Battle_Tank_Germany_KNDS_Rheinmetall_1920_001.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/KNDS-Deutschland-unveils-Leopard-2A7A1-tank-with-Trophy-protection-system.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step\n",
            "✅ KNDS-Deutschland-unveils-Leopard-2A7A1-tank-with-Trophy-protection-system.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/Ex4CXFRWEAM8fC-.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
            "✅ Ex4CXFRWEAM8fC-.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/KNDS-orders-Trophy-APS-for-German-and-Norwegian-Leopard-2A8-tanks.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n",
            "✅ KNDS-orders-Trophy-APS-for-German-and-Norwegian-Leopard-2A8-tanks.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/snimok_ekrana_2021-11-02_v_21-42-53-635c9a28b7550fde17059cc779c9b192.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 59ms/step\n",
            "✅ snimok_ekrana_2021-11-02_v_21-42-53-635c9a28b7550fde17059cc779c9b192.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/6096_03360.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n",
            "✅ 6096_03360.jpg → Leclerc\n",
            "🔍 Memproses: /content/drive/MyDrive/Semester 4/Kecerdasan Tiruan/Pertemuan 10/Dataset Gambar Tank/Leopard/unnamed.jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step\n",
            "✅ unnamed.jpg → Leclerc\n"
          ]
        }
      ]
    }
  ]
}